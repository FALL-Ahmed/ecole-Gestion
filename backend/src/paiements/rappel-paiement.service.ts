import { Injectable, Logger } from '@nestjs/common';
import { PaiementService } from '../paiements/paiements.service';
import { TwilioService } from '../twilo/twilio.service';
import { EtablissementInfoService } from '../etablissement/etablissement-info.service';

@Injectable()
export class RappelPaiementService {
  private readonly logger = new Logger(RappelPaiementService.name);

  constructor(
    private readonly paiementService: PaiementService,
    private readonly twilioService: TwilioService,
    private readonly etablissementInfoService: EtablissementInfoService,
  ) {}

  // Dans rappel-paiement.service.ts
async envoyerRappelManuel(eleveId: number, mois: string) {
  try {
    const { status, paiement, montantRestant } = await this.paiementService.getPaymentStatus(eleveId, mois);
    const { schoolName, schoolPhone } = await this.etablissementInfoService.getNotificationDetails();

    // Cas 1: Aucun enregistrement existe - r√©cup√©rer les infos de base
    if (status === 'not-exists') {
      const eleveInfo = await this.paiementService.getEleveInfo(eleveId);
      
      if (!eleveInfo?.tuteurTelephone) {
        return {
          success: false,
          message: 'Num√©ro de t√©l√©phone du tuteur non disponible'
        };
      }

      await this.envoyerNotificationNonPaye(
        eleveInfo.tuteurTelephone.trim(),
        mois,
        eleveInfo.prenom,
        eleveInfo.nom,
        eleveInfo.montantAttendu || 0,
        schoolName,
        schoolPhone
      );
      return {
        success: true,
        message: `Notification pour paiement manquant envoy√©e pour ${mois}`
      };
    }

    // Validation pour les autres cas
    if (!paiement?.eleve?.tuteurTelephone) {
      return {
        success: false,
        message: 'Num√©ro de t√©l√©phone du tuteur non disponible'
      };
    }

    const tuteurTelephone = paiement.eleve.tuteurTelephone.trim();

    // Cas 2: D√©j√† pay√© compl√®tement
    if (status === 'paye') {
      await this.envoyerNotificationPaye(
        tuteurTelephone,
        mois,
        paiement.eleve.prenom,
        paiement.eleve.nom,
        schoolName,
        schoolPhone
      );
      return {
        success: true,
        message: `Notification de paiement complet envoy√©e pour ${mois}`
      };
    }

    // Cas 3: Paiement partiel
    if (status === 'partiel') {
      await this.envoyerNotificationPartiel(
        tuteurTelephone,
        mois,
        paiement.eleve.prenom,
        paiement.eleve.nom,
        paiement.montantPaye,
        paiement.montantAttendu,
        montantRestant ?? paiement.montantAttendu - paiement.montantPaye,
        schoolName,
        schoolPhone
      );
    } 
    // Cas 4: Non pay√© (mais enregistrement existe)
    else {
      await this.envoyerNotificationNonPaye(
        tuteurTelephone,
        mois,
        paiement.eleve.prenom,
        paiement.eleve.nom,
        paiement.montantAttendu,
        schoolName,
        schoolPhone
      );
    }

    return {
      success: true,
      message: `Notification envoy√©e pour ${mois}`
    };

  } catch (error) {
    this.logger.error(`Erreur d'envoi de rappel`, error.stack);
    throw new Error(`√âchec de l'envoi: ${error.message}`);
  }
}
  private async envoyerNotificationNonPaye(
    telephone: string,
    mois: string,
    prenom: string,
    nom: string,
    montantAttendu: number,
    schoolName: string | null,
    schoolPhone: string | null
  ) {
    const ecole = (schoolName || "L'Administration Scolaire").trim();
    const contact = (schoolPhone || '').trim();

    const message = `üì£ *RAPPEL DE PAIEMENT EN RETARD* üì£

Bonjour Cher Parent,

Nous vous informons que le paiement scolaire du mois de *${mois}* pour *${prenom} ${nom}* n'a pas encore √©t√© effectu√©.

üî¥ *Statut* : IMPAY√â
üí∞ *Montant d√ª* : ${montantAttendu} MRU
‚è≥ *Date limite d√©pass√©e* : 5 ${mois}

*Veuillez r√©gulariser au plus vite :*
1. Esp√®ce au secr√©tariat
2. Paiement mobile (BANKILY - MASRIVI - SEDDAD)

${contact ? `üìû Contactez-nous : ${contact}\n` : ''}

*Un retard de paiement peut entra√Æner des mesures administratives.*

Cordialement,
*${ecole}*`.trim();

    await this.twilioService.sendWhatsAppMessage(telephone, message);
  }

  private async envoyerNotificationPartiel(
    telephone: string,
    mois: string,
    prenom: string,
    nom: string,
    montantPaye: number,
    montantAttendu: number,
    montantRestant: number,
    schoolName: string | null,
    schoolPhone: string | null
  ) {
    const ecole = (schoolName || "L'Administration Scolaire").trim();
    const contact = (schoolPhone || '').trim();

    const message = `üì£ *RAPPEL DE PAIEMENT PARTIEL* üì£

Bonjour Cher Parent,

Nous avons bien re√ßu un paiement partiel pour *${prenom} ${nom}* concernant le mois de *${mois}*.

üü† *Statut* : PARTIEL
‚îú üí∞ Montant attendu : ${montantAttendu} MRU
‚îú ‚úîÔ∏è Montant pay√© : ${montantPaye} MRU
‚îî ‚ö†Ô∏è Reste √† payer : ${montantRestant} MRU

‚è≥ *Date limite* : 15 ${mois}

Modes de paiement :
1. Esp√®ce au secr√©tariat
2. Mobile (BANKILY - MASRIVI - SEDDAD)

${contact ? `üìû Pour toute question : ${contact}\n` : ''}

Merci de compl√©ter le solde d√®s que possible.

Cordialement,
*${ecole}*`.trim();

    await this.twilioService.sendWhatsAppMessage(telephone, message);
  }

  private async envoyerNotificationPaye(
    telephone: string,
    mois: string,
    prenom: string,
    nom: string,
    schoolName: string | null,
    schoolPhone: string | null
  ) {
    const ecole = (schoolName || "L'Administration Scolaire").trim();
    const contact = (schoolPhone || '').trim();

    const message = `üì£ *ACCUS√â DE PAIEMENT* üì£

Bonjour Cher Parent,

Le paiement scolaire du mois de *${mois}* pour *${prenom} ${nom}* a √©t√© re√ßu en totalit√©.

üü¢ *Statut* : PAY√â
‚úÖ Merci pour votre prompt paiement.

${contact ? `üìû Contact : ${contact}\n` : ''}

Cordialement,
*${ecole}*`.trim();

    await this.twilioService.sendWhatsAppMessage(telephone, message);
  }
}
